{"id":"node_modules/url-toolkit/src/url-toolkit.js","dependencies":[{"name":"/Users/mdelano/code/safestream-player-example/package.json","includedInParent":true,"mtime":1605189636755},{"name":"/Users/mdelano/code/safestream-player-example/node_modules/url-toolkit/package.json","includedInParent":true,"mtime":1605186532048}],"generated":{"js":"var define;\n// see https://tools.ietf.org/html/rfc1808\n\n(function (root) {\n  var URL_REGEX = /^((?:[a-zA-Z0-9+\\-.]+:)?)(\\/\\/[^\\/?#]*)?((?:[^\\/?#]*\\/)*[^;?#]*)?(;[^?#]*)?(\\?[^#]*)?(#.*)?$/;\n  var FIRST_SEGMENT_REGEX = /^([^\\/?#]*)(.*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n\n  var URLToolkit = {\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function (baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(\n          basePartsForNormalise.path\n        );\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment,\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath =\n              baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) +\n              relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize\n          ? URLToolkit.normalizePath(relativeParts.path)\n          : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function (url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || '',\n      };\n    },\n    normalizePath: function (path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (\n        path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length\n      ) {}\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function (parts) {\n      return (\n        parts.scheme +\n        parts.netLoc +\n        parts.path +\n        parts.params +\n        parts.query +\n        parts.fragment\n      );\n    },\n  };\n\n  if (typeof exports === 'object' && typeof module === 'object')\n    module.exports = URLToolkit;\n  else if (typeof define === 'function' && define.amd)\n    define([], function () {\n      return URLToolkit;\n    });\n  else if (typeof exports === 'object') exports['URLToolkit'] = URLToolkit;\n  else root['URLToolkit'] = URLToolkit;\n})(this);\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/url-toolkit/src/url-toolkit.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}}],"sources":{"node_modules/url-toolkit/src/url-toolkit.js":"// see https://tools.ietf.org/html/rfc1808\n\n(function (root) {\n  var URL_REGEX = /^((?:[a-zA-Z0-9+\\-.]+:)?)(\\/\\/[^\\/?#]*)?((?:[^\\/?#]*\\/)*[^;?#]*)?(;[^?#]*)?(\\?[^#]*)?(#.*)?$/;\n  var FIRST_SEGMENT_REGEX = /^([^\\/?#]*)(.*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n\n  var URLToolkit = {\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function (baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(\n          basePartsForNormalise.path\n        );\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment,\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath =\n              baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) +\n              relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize\n          ? URLToolkit.normalizePath(relativeParts.path)\n          : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function (url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || '',\n      };\n    },\n    normalizePath: function (path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (\n        path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length\n      ) {}\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function (parts) {\n      return (\n        parts.scheme +\n        parts.netLoc +\n        parts.path +\n        parts.params +\n        parts.query +\n        parts.fragment\n      );\n    },\n  };\n\n  if (typeof exports === 'object' && typeof module === 'object')\n    module.exports = URLToolkit;\n  else if (typeof define === 'function' && define.amd)\n    define([], function () {\n      return URLToolkit;\n    });\n  else if (typeof exports === 'object') exports['URLToolkit'] = URLToolkit;\n  else root['URLToolkit'] = URLToolkit;\n})(this);\n"},"lineCount":175}},"error":null,"hash":"9b5783f7b22d1c54becf302bbba1ecff","cacheData":{"env":{}}}